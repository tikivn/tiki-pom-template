<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>vn.tiki</groupId>
	<artifactId>tiki-pom-template</artifactId>
	<version>1.1.4</version>
	<packaging>pom</packaging>

	<parent>
		<groupId>org.sonatype.oss</groupId>
		<artifactId>oss-parent</artifactId>
		<version>9</version>
	</parent>

	<properties>
		<maven.compiler.source>11</maven.compiler.source>
		<maven.compiler.target>11</maven.compiler.target>

		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<delombok.output>${project.build.directory}/delombok</delombok.output>

		<lombok.version>1.18.10</lombok.version>

		<log4j2.version>2.11.1</log4j2.version>
		<log4j2.scope>test</log4j2.scope>

		<junit.version>4.12</junit.version>
		<powermock.version>2.0.2</powermock.version>
		<mockito.core.version>2.28.2</mockito.core.version>

		<!-- Sonar -->
		<jacoco.maven.plugin.version>0.8.2</jacoco.maven.plugin.version>
		<sonar.java.coveragePlugin>jacoco</sonar.java.coveragePlugin>
		<sonar.dynamicAnalysis>reuseReports</sonar.dynamicAnalysis>
		<sonar.jacoco.reportPath>${project.basedir}/../target/jacoco.exec</sonar.jacoco.reportPath>
		<sonar.jacoco.outputDirectory>${project.reporting.outputEncoding}</sonar.jacoco.outputDirectory>
		<sonar.language>java</sonar.language>

		<project.dist>dist/${project.artifactId}</project.dist>

		<release.sbin.start.name>start-${project.artifactId}</release.sbin.start.name>
		<release.vmoptions.xms>512M</release.vmoptions.xms>
		<release.vmoptions.xmx>512M</release.vmoptions.xmx>
		<release.vmoptions.more></release.vmoptions.more>
	</properties>

	<distributionManagement>
		<repository>
			<id>tiki.archiva.releases</id>
			<name>Tiki - Archiva Releases Repository</name>
			<url>http://archiva.dev.tiki.services/repository/internal</url>
		</repository>
		<snapshotRepository>
			<id>tiki.archiva.snapshots</id>
			<name>Tiki - Archiva Snapshots Repository</name>
			<url>http://archiva.dev.tiki.services/repository/snapshots</url>
		</snapshotRepository>
	</distributionManagement>

	<build>
		<sourceDirectory>src/main/java</sourceDirectory>
		<resources>
			<resource>
				<directory>src/main/resources</directory>
			</resource>
		</resources>

		<testSourceDirectory>src/test/java</testSourceDirectory>
		<testResources>
			<testResource>
				<directory>src/test/resources</directory>
			</testResource>
		</testResources>
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.jacoco</groupId>
					<artifactId>jacoco-maven-plugin</artifactId>
					<version>${jacoco.maven.plugin.version}</version>
					<configuration>
						<outputDirectory>${sonar.jacoco.outputDirectory}</outputDirectory>
						<dataFile>${sonar.jacoco.reportPath}</dataFile>
						<destFile>${sonar.jacoco.reportPath}</destFile>
						<append>true</append>
					</configuration>
					<executions>
						<execution>
							<id>prepare-agent</id>
							<goals>
								<goal>prepare-agent</goal>
							</goals>
						</execution>
						<execution>
							<id>default-report</id>
							<phase>prepare-package</phase>
							<goals>
								<goal>report</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.projectlombok</groupId>
										<artifactId>lombok-maven-plugin</artifactId>
										<versionRange>[1,)</versionRange>
										<goals>
											<goal>delombok</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore />
									</action>
								</pluginExecution>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.apache.maven.plugins</groupId>
										<artifactId>maven-enforcer-plugin</artifactId>
										<versionRange>[1.0.0,)</versionRange>
										<goals>
											<goal>enforce</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore />
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>

				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-dependency-plugin</artifactId>
					<version>2.8</version>
					<executions>
						<execution>
							<id>copy-dependencies</id>
							<phase>package</phase>
							<goals>
								<goal>copy-dependencies</goal>
							</goals>
							<configuration>
								<outputDirectory>${project.dist}/lib</outputDirectory>
								<overWriteReleases>true</overWriteReleases>
								<overWriteSnapshots>false</overWriteSnapshots>
								<overWriteIfNewer>true</overWriteIfNewer>
								<excludeScope>provided</excludeScope>
							</configuration>
						</execution>
					</executions>
				</plugin>

				<plugin>
					<artifactId>maven-antrun-plugin</artifactId>
					<version>1.8</version>
					<executions>
						<execution>
							<phase>package</phase>
							<configuration>
								<target>
									<delete failonerror="false">
										<fileset dir="${project.dist}" />
									</delete>
									<copy todir="${project.dist}/lib">
										<fileset dir="${project.build.directory}">
											<exclude name="*-sources.jar" />
											<exclude name="*-javadoc.jar" />
											<include name="*.jar" />
										</fileset>
									</copy>
									<copy todir="${project.dist}/config" failonerror="false">
										<fileset dir="${project.basedir}/config" />
									</copy>

									<echo file="${project.dist}/version.txt" append="false">${project.version}</echo>
									<echo file="${project.dist}/${project.artifactId}.vmoptions"><![CDATA[
--add-modules java.se 
--add-exports java.base/jdk.internal.ref=ALL-UNNAMED 
--add-opens java.base/java.lang=ALL-UNNAMED 
--add-opens java.base/java.nio=ALL-UNNAMED 
--add-opens java.base/sun.nio.ch=ALL-UNNAMED 
--add-opens java.management/sun.management=ALL-UNNAMED 
--add-opens jdk.management/com.sun.management.internal=ALL-UNNAMED
#
-Dfile.encoding=UTF-8
-server
-Xms${release.vmoptions.xms}
-Xmx${release.vmoptions.xmx}
#
# force to use G1GC
-XX:+UseG1GC
-XX:MaxGCPauseMillis=100
#
# heap dump
-XX:+HeapDumpOnOutOfMemoryError
-XX:HeapDumpPath="logs/heap-dump-$HOSTNAME.hprof"
#
# log4j config to use disruptor
-DLog4jContextSelector=org.apache.logging.log4j.core.async.AsyncLoggerContextSelector
-DAsyncLoggerConfig.RingBufferSize=1024*1024
#
# additional options which configured from pom's properties gone here
${release.vmoptions.more}
#
									]]></echo>
									<echo file="${project.dist}/${release.sbin.start.name}.sh"><![CDATA[#!/bin/bash
SELF_ABSOLUTE_PATH="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/$(basename "${BASH_SOURCE[0]}")"
WORKING_DIR=$(dirname $SELF_ABSOLUTE_PATH)

read_vmoptions() {
  vmoptions_file=`eval echo "$1" 2>/dev/null`
  if [ ! -r "$vmoptions_file" ]; then
    vmoptions_file="$prg_dir/$vmoptions_file"
  fi
  if [ -r "$vmoptions_file" ] && [ -f "$vmoptions_file" ]; then
    exec 8< "$vmoptions_file"
    while read cur_option<&8; do
      is_comment=`expr "W$cur_option" : 'W *#.*'`
      if [ "$is_comment" = "0" ]; then 
      	echo $cur_option
        vmo_include=`expr "W$cur_option" : 'W *-include-options \(.*\)'`
        if [ "$vmo_include" = "" ]; then
          JVM_OPTS="$JVM_OPTS $(eval echo $cur_option)"
        fi
      fi
    done
    exec 8<&-
    if [ ! "$vmo_include" = "" ]; then
      read_vmoptions "$vmo_include"
    fi
  fi
}

JVM_OPTS=""
read_vmoptions $WORKING_DIR/${project.artifactId}.vmoptions

MAIN_CLASS=${mainClass}
LOCAL_CLASSPATH="$WORKING_DIR/*:$WORKING_DIR/lib/*"

java $JVM_OPTS -cp "$LOCAL_CLASSPATH" -Dworking.dir=$WORKING_DIR $MAIN_CLASS $@]]></echo>
									<copy file="${project.dist}/${release.sbin.start.name}.sh" tofile="${project.dist}/${release.sbin.start.name}-background.sh" />
									<echo append="true" file="${project.dist}/${release.sbin.start.name}-background.sh"><![CDATA[ > /dev/null 2>&1 &]]></echo>
								</target>
							</configuration>
							<goals>
								<goal>run</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
			</plugins>
		</pluginManagement>

		<plugins>
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
			</plugin>
			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.8.0</version>
				<configuration>
					<release>${maven.compiler.target}</release>
					<source>${maven.compiler.source}</source>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-source-plugin</artifactId>
				<version>3.0.1</version>
				<executions>
					<execution>
						<id>attach-sources</id>
						<goals>
							<goal>jar</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<artifactId>maven-javadoc-plugin</artifactId>
				<version>3.1.0</version>
				<configuration>
					<sourcepath>${delombok.output}</sourcepath>
				</configuration>
				<executions>
					<execution>
						<id>javadoc-jar</id>
						<phase>package</phase>
						<goals>
							<goal>jar</goal>
						</goals>
						<configuration>
							<additionalparam>${javadoc.opts}</additionalparam>
							<additionalparam>-Xdoclint:none</additionalparam>
							<additionalOptions>-Xdoclint:none</additionalOptions>
							<additionalJOption>-Xdoclint:none</additionalJOption>
							<additionalOptions>-html5</additionalOptions>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.projectlombok</groupId>
				<artifactId>lombok-maven-plugin</artifactId>
				<version>1.18.0.0</version>
				<configuration>
					<sourceDirectory>${project.basedir}/src/main/java</sourceDirectory>
					<outputDirectory>${delombok.output}</outputDirectory>
					<addOutputDirectory>false</addOutputDirectory>
				</configuration>
				<executions>
					<execution>
						<phase>generate-sources</phase>
						<goals>
							<goal>delombok</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>exec-maven-plugin</artifactId>
				<version>1.2.1</version>
				<executions>
					<execution>
						<goals>
							<goal>java</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.projectlombok</groupId>
				<artifactId>lombok</artifactId>
				<version>${lombok.version}</version>
				<scope>provided</scope>
			</dependency>
			<dependency>
				<groupId>org.apache.logging.log4j</groupId>
				<artifactId>log4j-api</artifactId>
				<version>${log4j2.version}</version>
				<scope>${log4j2.scope}</scope>
			</dependency>
			<dependency>
				<groupId>org.apache.logging.log4j</groupId>
				<artifactId>log4j-core</artifactId>
				<version>${log4j2.version}</version>
				<scope>${log4j2.scope}</scope>
			</dependency>
			<dependency>
				<groupId>org.apache.logging.log4j</groupId>
				<artifactId>log4j-slf4j-impl</artifactId>
				<version>${log4j2.version}</version>
				<scope>${log4j2.scope}</scope>
			</dependency>
			<dependency>
				<groupId>junit</groupId>
				<artifactId>junit</artifactId>
				<version>${junit.version}</version>
				<scope>test</scope>
			</dependency>
			<dependency>
				<groupId>org.mockito</groupId>
				<artifactId>mockito-core</artifactId>
				<version>${mockito.core.version}</version>
				<scope>test</scope>
			</dependency>
			<dependency>
				<groupId>org.powermock</groupId>
				<artifactId>powermock-module-junit4</artifactId>
				<version>${powermock.version}</version>
				<scope>test</scope>
			</dependency>
			<dependency>
				<groupId>org.powermock</groupId>
				<artifactId>powermock-api-mockito2</artifactId>
				<version>${powermock.version}</version>
				<scope>test</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>


	<dependencies>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
		</dependency>
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-api</artifactId>
		</dependency>
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-core</artifactId>
		</dependency>
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-slf4j-impl</artifactId>
		</dependency>
	</dependencies>

	<profiles>
		<profile>
			<id>release</id>

			<activation>
				<property>
					<name>release</name>
					<value>true</value>
				</property>
			</activation>

			<properties>
				<log4j2.scope>runtime</log4j2.scope>
			</properties>

			<build>
				<plugins>
					<plugin>
						<artifactId>maven-antrun-plugin</artifactId>
					</plugin>
					<plugin>
						<artifactId>maven-dependency-plugin</artifactId>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
</project>